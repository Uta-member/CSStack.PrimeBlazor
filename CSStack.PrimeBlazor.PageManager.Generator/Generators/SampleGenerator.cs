using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Linq;

namespace CSStack.PrimeBlazor.PageManager
{
    public static class DiagnosticDescriptors
    {
        public static readonly DiagnosticDescriptor ExistsOverrideToString = new(
            id: "SAMPLE001",
            title: "ToString override",
            messageFormat: "The GenerateToString class '{0}' has ToString override but it is not allowed.",
            category: Category,
            defaultSeverity: DiagnosticSeverity.Error,
            isEnabledByDefault: true);
        private const string Category = "CSStack.PrimeBlazor.PageManager";
    }

    [Generator(LanguageNames.CSharp)]
    public sealed class SampleGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            context.RegisterPostInitializationOutput(
                static context =>
                {
                    context.AddSource(
                        "SampleGeneratorAttribute.cs",
                        """
                        namespace CSStack.PrimeBlazor.PageManager
                        {
                            using System;
                        
                            [AttributeUsage(AttributeTargets.Class, Inherited = false, AllowMultiple = false)]
                            internal sealed class GenerateToStringAttribute : Attribute
                            {
                            }
                        }
                        """);
                });

            var source = context.SyntaxProvider
                .ForAttributeWithMetadataName(
                    "CSStack.PrimeBlazor.PageManager.GenerateToStringAttribute",
                    static(node, token) => true,
                    static(context, token) => context);
            context.RegisterSourceOutput(source, Emit);
        }

        private static void Emit(SourceProductionContext context, GeneratorAttributeSyntaxContext source)
        {
            var typeSymbol = (INamedTypeSymbol)source.TargetSymbol;
            var typeNode = (TypeDeclarationSyntax)source.TargetNode;

            if (typeSymbol.GetMembers("ToString").Length != 0)
            {
                context.ReportDiagnostic(
                    Diagnostic.Create(
                        DiagnosticDescriptors.ExistsOverrideToString,
                        typeNode.Identifier.GetLocation(),
                        typeSymbol.Name));
                return;
            }

            var ns = typeSymbol.ContainingNamespace.IsGlobalNamespace
                ? string.Empty
                : $"namespace {typeSymbol.ContainingNamespace};";

            var fullType = typeSymbol.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)
                .Replace("global::", string.Empty)
                .Replace("<", "_")
                .Replace(">", "_");

            var publicMembers = typeSymbol.GetMembers()
                .Where(
                    x =>
                    x is (IFieldSymbol or IPropertySymbol)
                         and { IsStatic: false, DeclaredAccessibility: Accessibility.Public, IsImplicitlyDeclared: false, CanBeReferencedByName: true })
                .Select(x => $"{x.Name}:{{{x.Name}}}");

            var toString = string.Join(", ", publicMembers);

            var code = 
                $$"""
                // <auto-generated/>
                #nullable enable
                #pragma warning disable CS8600
                #pragma warning disable CS8601
                #pragma warning disable CS8602
                #pragma warning disable CS8603
                #pragma warning disable CS8604

                {{ns}}

                partial class {{typeSymbol.Name}}
                {
                    public override string ToString()
                    {
                        return $"{{toString}}";
                    }
                }
                """;

            context.AddSource($"{fullType}.SampleGenerator.g.cs", code);
        }
    }
}
